{"version":3,"sources":["../../../api/server/services/BookService.js"],"names":["database","require","BookService","book","findAll","newBook","create","id","updateBook","findOne","where","Number","bookToUpdate","update","theBook","bookToDelete","destroy","deletedBook","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAxB;;IAEMC,W;;;;;;;;;;;;;;;uBAGUF,QAAQ,CAACG,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;qHAMMC,O;;;;;;;uBAENL,QAAQ,CAACG,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;yHAMSE,E,EAAIC,W;;;;;;;;uBAECR,QAAQ,CAACG,IAAT,CAAcM,OAAd,CAAsB;AAChDC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADyC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAIFA,Y;;;;;;uBACGZ,QAAQ,CAACG,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAjC,C;;;kDAECC,W;;;kDAED,I;;;;;;;;;;;;;;;;;;;;;;;;sHAMaD,E;;;;;;;;uBAEEP,QAAQ,CAACG,IAAT,CAAcM,OAAd,CAAsB;AAC3CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADoC,iBAAtB,C;;;AAAhBO,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;wHAMeP,E;;;;;;;;uBAEKP,QAAQ,CAACG,IAAT,CAAcM,OAAd,CAAsB;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAtB,C;;;AAArBQ,gBAAAA,Y;;qBAEFA,Y;;;;;;uBACuBf,QAAQ,CAACG,IAAT,CAAca,OAAd,CAAsB;AAC/CN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADwC,iBAAtB,C;;;AAApBU,gBAAAA,W;kDAGCA,W;;;kDAED,I;;;;;;;;;;;;;;;;;;;;;;;;;AAOVC,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["const database = require('../src/models');\n\nclass BookService {\n\tstatic async getAllBooks() {\n\t\ttry {\n\t\t\treturn await database.book.findAll();\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async addBook(newBook) {\n\t\ttry {\n\t\t\treturn await database.book.create(newBook);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async updateBook(id, updateBook) {\n\t\ttry {\n\t\t\tconst bookToUpdate = await database.book.findOne({\n\t\t\t\twhere: { id: Number(id) }\n\t\t\t});\n\n\t\t\tif (bookToUpdate) {\n\t\t\t\tawait database.book.update(updateBook, { where: { id: Number(id) } });\n\n\t\t\t\treturn updateBook;\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getABook(id) {\n\t\ttry {\n\t\t\tconst theBook = await database.book.findOne({\n\t\t\t\twhere: { id: Number(id) }\n\t\t\t});\n\n\t\t\treturn theBook;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async deleteBook(id) {\n\t\ttry {\n\t\t\tconst bookToDelete = await database.book.findOne({ where: { id: Number(id) } });\n\n\t\t\tif (bookToDelete) {\n\t\t\t\tconst deletedBook = await database.book.destroy({\n\t\t\t\t\twhere: { id: Number(id) }\n\t\t\t\t});\n\t\t\t\treturn deletedBook;\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nmodule.exports = BookService;\n"],"file":"BookService.js"}